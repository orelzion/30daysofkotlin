{
  "summary" : "30 יום עם קוטלין, קורס חינמי מבית אנדרואידוס שיקח אתכם למסע היכרות עם שפת התכנות בה מפתחים אפליקציות לאנדרואיד ב30 יום!",
  "title" : "Androidoss - 30 days of Kotlin",
  "authors" : [
    "Orelzion"
  ],
  "programming_language" : "kotlin",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Hello World",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    print(\"Hello, world!\")\n}"
            },
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "Hello, world!"
            }
          },
          "description_text" : "<html>\n<body dir=\"rtl\">\n    <h1>Hello world</h1>\n\n    <div>\n    איזה כיף! הורדתם והתקנתם את Android Studio ועכשיו תריצו את הקוד הראשון שלכם!\n    <br><br>\n    המטרה בתרגיל הזה היא רק להכיר את סביבת הלימוד שלנו, אתם לא צריכים לעשות הרבה חוץ מלהריץ את הקוד ולראות שהוא אכן רץ.\n        <br><br>\n    רואים את המשולש הירוק הזה מצד שמאל? לחצו עליו ואחר כך על Run TaskKt.\n        <br><br>\n    עכשיו, תיפתח לכם למטה לשונית קטנה שבה יהיה כתוב Hello, World!\n        <br><br>\n    הצלחתם? ברכותי, עשיתם את הצעד הראשון בדרך ללהיות מפתחי אנדרואיד!\n        <br><br>\n    בהצלחה!!\n    </div>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Variables 1",
      "task_list" : [
        {
          "choiceOptions" : [
            {
              "text" : "var age = 30",
              "status" : "CORRECT"
            },
            {
              "text" : "var age = 23.5",
              "status" : "INCORRECT"
            },
            {
              "text" : "var age = 32L",
              "status" : "INCORRECT"
            }
          ],
          "isMultipleChoice" : false,
          "name" : "task1",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    // Write your solution here\n}\n"
            }
          },
          "description_text" : "<html dir=\"rtl\" lang=\"iw\">\nאיזה הצהרה תיצור משתנה מסוג Int?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "choice"
        },
        {
          "name" : "task2",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var age: Double = 30\n    println(age)\n}\n"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Test\nimport com.github.stefanbirkner.systemlambda.SystemLambda.*\nimport org.junit.Assert\n\nclass Tests {\n    @Test fun testOutput() {\n\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertEquals(30.0, output.toDouble(), 0.0)\n    }\n}"
            }
          },
          "description_text" : "<html>\nתקנו את הקוד הבא\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var name: String\n    println(name)\n}\n"
            },
            "test/Main.kt" : {
              "name" : "test/Main.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Test\nimport com.github.stefanbirkner.systemlambda.SystemLambda.*\nimport org.junit.Assert\n\n\nclass Main {\n    @Test\n    fun testThatThereIsOutput() {\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertNotEquals(\"\", output.trim())\n    }\n}"
            }
          },
          "description_text" : "<html>\nתקנו את הקוד הזה\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 6,
                  "possible_answer" : "TODO()",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "fun main() {\n    TODO()\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert\nimport org.junit.Test\nimport com.github.stefanbirkner.systemlambda.SystemLambda.*\n\nclass Test {\n    @Test fun testSolution() {\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertTrue(output.trim().startsWith(\"Dr.\"))\n    }\n}"
            }
          },
          "description_text" : "<html>\n<ol>\n    <li>צרו משתנה שיכיל שם</li>\n    <li>הדפיסו את השם בתוספת הקידומת Dr.</li>\n</ol>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task5",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var result = 5 / 2\n    println(result)\n}\n"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Test\nimport com.github.stefanbirkner.systemlambda.SystemLambda.*\nimport org.junit.Assert\n\nclass Tests {\n    @Test fun testOutput() {\n\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertEquals(2.5, output.toDouble(), 0.0)\n    }\n}"
            }
          },
          "description_text" : "<html>\nמה תהיה התוצאה של הקוד הבא?\n<br><br>\nאיך תוכלו לשנות אותו כך שיתן תוצאה מדוייקת?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task6",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var isEqual = 1 == 4\n    println(isEqual)\n}"
            }
          },
          "description_text" : "<html>\nמה תהיה ההדפסה של הקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Variables 2",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var myAge = 32\n    var iAmOld = myAge > 200\n\n    println(iAmOld)\n}\n"
            }
          },
          "description_text" : "<html>\nמה הפלט שיתקבל מהקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "task2",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// type your solution here\nfun main() {\n    val age: Any = 6\n    println(age / 2)\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertEquals(3, output.trim().toInt())\n    }\n}"
            }
          },
          "description_text" : "<html>\nלמה הקוד הבא לא מתקמפל?\n<br><br>\nאיך תתקנו אותו?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// type your solution here\nfun main() {\n    val attaAlluf = true\n    attaAlluf = false\n\n    println(attaAlluf)\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertFalse(output.trim().toBoolean())\n    }\n}"
            }
          },
          "description_text" : "<html>\n<div>\n    האם הקוד הבא יתקמפל?\n</div>\n<div>\n    איך תגרמו לו להתקמפל?\n</div>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task4",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "// type your solution here\nfun main() {\n    val numOfDoors = \"5\"\n    val numOfRooms = 4\n    val isValid = numOfDoors / numOfRooms\n    println(isValid)\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val output = tapSystemOut {\n            main()\n        }\n        Assert.assertEquals(1, output.trim().toInt())\n    }\n}"
            }
          },
          "description_text" : "<html>\nתקנו את הקוד הבא בלי לשנות את שורה 3\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task5",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    // Write your solution here\n}\n"
            }
          },
          "description_text" : "<html>\nמה ההבדל בין casting להמרה?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Conditions",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var isValid = true\n    var isLong = false\n\n    println(isValid && isLong)\n    // מה הערך שיודפס כאן?\n\n    println(!isLong)\n    // מה הערך שיודפס כאן?\n}\n"
            }
          },
          "description_text" : "<html>\nמה הפלט שיתקבל מהקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "task2",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val myName = \"orel\"\n\n    if(myName == \"orel\") {\n        println(\"This is me\")\n    }\n}\n"
            }
          },
          "description_text" : "<html>\nמה הערך שיתקבל מהקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "task3",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val sum = 3 * 4 / 6 + (5 * 10) - 3\n    println(sum)\n}\n"
            }
          },
          "description_text" : "<html>\nמה הפלט שיתקבל מהקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "task4",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    var age = 30\n\n    println(age++)\n    // מה יתקבל כאן?\n\n    println(age)\n    //מה יתקבל כאן?\n\n    println(++age)\n    //מה יתקבל כאן?\n}\n"
            }
          },
          "description_text" : "<html>\nמה הפלט שיתקבל מהקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "task5",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 40,
                  "length" : 6,
                  "possible_answer" : "    TODO()",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "// type your solution here\nfun main() {\nTODO()\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val option1 = \"אני גדול\"\n        val option2 = \"אני מאותגר גודל\"\n\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertTrue(output.trim() == option1 || output.trim() == option2)\n    }\n}"
            }
          },
          "description_text" : "<html>\n<div>\n    כתבו תכנית שיוצרת משתנה מסוג Int\n    <br><br>\n    אם המשתנה גדול מ10 תדפיס \"אני גדול״\n    <br><br>\n    אחרת, תדפיס ״אני מאותגר גודל״\n</div>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task6",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 40,
                  "length" : 30,
                  "possible_answer" : "    TODO()",
                  "placeholder_text" : "TODO() הוסף שתי משתנים מספריים"
                },
                {
                  "offset" : 89,
                  "length" : 6,
                  "possible_answer" : "TODO()",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "// type your solution here\nfun main() {\nTODO() הוסף שתי משתנים מספריים\n\n    val output = TODO()\n\n    println(output)\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test\n    fun testSolution() {\n\n        val option1 = \"a cute couple\".toUpperCase()\n        val option2 = \"stay single\".toUpperCase()\n\n        val output = tapSystemOut {\n            main()\n        }.trim().toUpperCase()\n\n        Assert.assertTrue(\n            output == option1 ||\n                    output == option2\n        )\n    }\n}"
            }
          },
          "description_text" : "<html>\nכתבו תכנית שיוצרת שתי משתנים מסוג Int\n<br><br>\nאם תוצאת החילוק שלהם זוגי תדפיס\n<br>\n״a cute couple\"\n<br><br>\nלאי זוגי תדפיס\n<br>\n\"stay single\"\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Arrays",
      "task_list" : [
        {
          "choiceOptions" : [
            {
              "text" : "Haifa",
              "status" : "INCORRECT"
            },
            {
              "text" : "Jerusalem",
              "status" : "CORRECT"
            },
            {
              "text" : "Tel Aviv",
              "status" : "INCORRECT"
            }
          ],
          "isMultipleChoice" : false,
          "name" : "task1",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val cities = listOf(\"Haifa\", \"Jerusalem\", \"Tel Aviv\")\n\n    println(cities[1])\n}\n"
            }
          },
          "description_text" : "<html>\nמה הפלט של הקוד הבא?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "choice"
        },
        {
          "name" : "task2",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val cities = listOf(\"Haifa\", \"Jerusalem\", \"Tel Aviv\")\n\n    println(cities[5])\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        main()\n    }\n}"
            }
          },
          "description_text" : "<html>\nמה יקרה לקוד הזה?\n\nאיך נוכל להגן עליו?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 34,
                  "length" : 6,
                  "possible_answer" : "TODO",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "fun main(): Any {\n    val names = TODO()(\"Moshe\", \"Omer\", \"Dudu\", \"Omer\")\n\n    return names\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val names = main() as Set<String>\n\n        val output = names.joinToString(separator = \",\")\n\n        Assert.assertEquals(\"Moshe,Omer,Dudu\", output)\n    }\n}"
            }
          },
          "description_text" : "<html>\nאיזה מן המערכים הבאים מתאים ליצירת רשימה ש<b>אין</b> בה כפילויות?\n<br><br>\nהחליפו את המילה TODO בשם המערך הנכון\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "choiceOptions" : [
            {
              "text" : "scores(\"Itizik\")",
              "status" : "INCORRECT"
            },
            {
              "text" : "scores[\"Itizik\"]",
              "status" : "INCORRECT"
            },
            {
              "text" : "scores.get(\"Itizik\")",
              "status" : "INCORRECT"
            },
            {
              "text" : "תשובות 2 ו3 נכונות",
              "status" : "CORRECT"
            }
          ],
          "isMultipleChoice" : false,
          "name" : "task4",
          "files" : {
            "src/Main.kt" : {
              "name" : "src/Main.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val scores = mapOf(\"Itizk\" to 3)\n}\n"
            }
          },
          "description_text" : "<html>\nאיך ניגשים לmap?\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "choice"
        },
        {
          "name" : "task5",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "fun main() {\n    val fruits = listOf(\"Apple\", \"Lemon\")\n    fruits.add(\"Watermelon\")\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n\n    }\n}"
            }
          },
          "description_text" : "<html>\nהאם הקוד הבא יעבוד?\n<br><br>\nלמה לא?\n<br><br>\nהאם תוכלו לתקן אותו?\n<br><br>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Loops",
      "task_list" : [
        {
          "name" : "task1",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 63,
                  "length" : 6,
                  "possible_answer" : " TODO()",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "fun isPalindrom(text: String): Boolean {\n\n    var isPalindrom =TODO()\n    return isPalindrom\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val shouldBePalindrom = isPalindrom(\"abba\")\n        val shouldNotBePalindrom = isPalindrom(\"fsr\")\n\n        Assert.assertTrue(shouldBePalindrom)\n        Assert.assertFalse(shouldNotBePalindrom)\n    }\n}"
            }
          },
          "description_text" : "<html>\nיש לכתוב קוד שבודק אם string מסוים הוא פלינדרום.\n<br><br>\nכלומר שניתן לקרוא אותו משמאל לימין כמו גם מימין לשמאל.\n<br><br>\nלדוגמה: אבא, לבלבל, ילד כותב בתוך דלי (מתוך ויקיפדיה)\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task2",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 55,
                  "length" : 6,
                  "possible_answer" : "TODO()",
                  "placeholder_text" : "TODO()"
                },
                {
                  "offset" : 62,
                  "length" : 6,
                  "possible_answer" : "",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "fun main() {\n    val numbers = listOf(1, 3, 7, 4)\n\n    TODO()\nTODO()\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertEquals(\"1\\n3\\n7\", output.trim())\n    }\n}"
            }
          },
          "description_text" : "<html>\nכתבו לולאת while שרצה על המערך ועוצרת ברגע שהיא מגיעה למספר זוגי\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "task3",
          "files" : {
            "src/Task.kt" : {
              "name" : "src/Task.kt",
              "placeholders" : [
                {
                  "offset" : 17,
                  "length" : 6,
                  "possible_answer" : "TODO()",
                  "placeholder_text" : "TODO()"
                }
              ],
              "is_visible" : true,
              "text" : "fun main() {\n    TODO()\n}"
            },
            "test/Tests.kt" : {
              "name" : "test/Tests.kt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import com.github.stefanbirkner.systemlambda.SystemLambda.tapSystemOut\nimport org.junit.Assert\nimport org.junit.Test\n\nclass Test {\n    @Test fun testSolution() {\n        val output = tapSystemOut {\n            main()\n        }\n\n        Assert.assertEquals(\"3\\n5\\n7\\n9\\n11\\n13\\n15\\n17\\n19\", output.trim())\n    }\n}"
            }
          },
          "description_text" : "<html>\nכתבו לולאת for\n<br>\nשמדפיסה את כל המספרים ה<b>אי זוגיים</b>\n<br>\nמ3 עד 19\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "course.json",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "{\n  \"summary\" : \"30 יום עם קוטלין, קורס חינמתי מבית אנדרואידוס שיקח אתכם למסע היכרות עם שפת התכנות בה מפתחים אפליקציות לאנדרואיד ב30 יום!\",\n  \"title\" : \"Androidoss - 30 days of Kotlin\",\n  \"authors\" : [\n    \"Orelzion\"\n  ],\n  \"programming_language\" : \"kotlin\",\n  \"language\" : \"en\",\n  \"course_type\" : \"PyCharm\",\n  \"items\" : [\n    {\n      \"title\" : \"hello_world\",\n      \"task_list\" : [\n        {\n          \"name\" : \"task1\",\n          \"files\" : {\n            \"src/Task.kt\" : {\n              \"name\" : \"src/Task.kt\",\n              \"placeholders\" : [ ],\n              \"is_visible\" : true,\n              \"text\" : \"fun main() {\\n    println(\\\"Hello, world!\\\")\\n}\"\n            },\n            \"test/Tests.kt\" : {\n              \"name\" : \"test/Tests.kt\",\n              \"placeholders\" : [ ],\n              \"is_visible\" : false,\n              \"text\" : \"import org.junit.Assert\\nimport org.junit.Test\\nimport com.github.stefanbirkner.systemlambda.SystemLambda.*\\n\\nclass Test {\\n    @Test fun testSolution() {\\n        val output = tapSystemOut() {\\n            main()\\n        }\\n\\n        Assert.assertEquals(\\\"Hello, world!\\\", output.trim())\\n    }\\n}\"\n            }\n          },\n          \"description_text\" : \"<html>\\n<body dir=\\\"rtl\\\">\\n    <h1>Hello world</h1>\\n\\n    <div>\\n    איזה כיף! הורדתם והתקנתם את Android Studio ועכשיו תריצו את הקוד הראשון שלכם!\\n    <br><br>\\n    המטרה בתרגיל הזה היא רק להכיר את סביבת הלימוד שלנו, אתם לא צריכים לעשות הרבה חוץ מלהריץ את הקוד ולראות שהוא אכן רץ.\\n        <br><br>\\n    רואים את המשולש הירוק הזה מצד שמאל? לחצו עליו ואחר כך על Run TaskKt.\\n        <br><br>\\n    עכשיו, תיפתח לכם למטה לשונית קטנה שבה יהיה כתוב Hello, World!\\n        <br><br>\\n    הצלחתם? ברכותי, עשיתם את הצעד הראשון בדרך ללהיות מפתחי אנדרואיד!\\n        <br><br>\\n    בהצלחה!!\\n    </div>\\n</body>\\n</html>\",\n          \"description_format\" : \"HTML\",\n          \"feedback_link\" : {\n            \"link_type\" : \"STEPIK\"\n          },\n          \"task_type\" : \"edu\"\n        }\n      ],\n      \"type\" : \"lesson\"\n    }\n  ],\n  \"additional_files\" : [\n    {\n      \"name\" : \"build.gradle\",\n      \"placeholders\" : [ ],\n      \"is_visible\" : true,\n      \"text\" : \"buildscript {\\n    ext.kotlin_version = '1.4.10'\\n\\n    repositories {\\n        mavenCentral()\\n        \\n    }\\n\\n    dependencies {\\n        classpath \\\"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\\\"\\n    }\\n}\\n\\ndef printOutput(def output) {\\n    return tasks.create(\\\"printOutput\\\") {\\n        for (line in output.toString().readLines()) {\\n            println \\\"#educational_plugin\\\" + line\\n        }\\n    }\\n}\\n\\nsubprojects {\\n    apply plugin: 'application'\\n    apply plugin: 'java'\\n    apply plugin: 'kotlin'\\n\\n    sourceCompatibility = 1.8\\n\\n    repositories {\\n        mavenCentral()\\n        \\n    }\\n\\n    dependencies {\\n        compile \\\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\\\"\\n        testCompile group: 'junit', name: 'junit', version: '4.12'\\n    }\\n\\n    compileKotlin.destinationDir = compileJava.destinationDir\\n\\n    compileKotlin {\\n        kotlinOptions.jvmTarget = \\\"1.8\\\"\\n    }\\n    compileTestKotlin {\\n        kotlinOptions.jvmTarget = \\\"1.8\\\"\\n    }\\n\\n    sourceSets {\\n        main {\\n            kotlin.srcDir 'src'\\n            java.srcDir 'src'\\n        }\\n        test {\\n            kotlin.srcDir 'test'\\n            java.srcDir 'test'\\n        }\\n    }\\n\\n    mainClassName = project.hasProperty(\\\"mainClass\\\") ? project.getProperty(\\\"mainClass\\\") : \\\"\\\"\\n    test {\\n        outputs.upToDateWhen { false }\\n        afterTest { TestDescriptor test, TestResult result ->\\n            if (result.resultType == TestResult.ResultType.FAILURE) {\\n                def message = result.exception?.message ?: \\\"Wrong answer\\\"\\n                def lines = message.readLines()\\n                println \\\"#educational_plugin FAILED + \\\" + lines[0]\\n                lines.subList(1, lines.size()).forEach { line ->\\n                  println \\\"#educational_plugin\\\" + line\\n                }\\n                // we need this to separate output of different tests\\n                println()\\n            }\\n        }\\n    }\\n\\n    def runOutput = new ByteArrayOutputStream()\\n    tasks.run.setStandardOutput(runOutput)\\n    tasks.run.doLast { printOutput(runOutput) }\\n}\\n\\nproject(':util') {\\n    dependencies {\\n        compile group: 'junit', name: 'junit', version: '4.12'\\n    }\\n}\\n\\nconfigure(subprojects.findAll {it.name != 'util'}) {\\n  dependencies {\\n    compile project(':util').sourceSets.main.output\\n    testCompile project(':util').sourceSets.test.output\\n      testImplementation (\\\"com.github.stefanbirkner:system-lambda:1.2.0\\\")\\n  }\\n}\\n\"\n    }\n  ],\n  \"version\" : 11\n}"
    },
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    ext.kotlin_version = '1.4.10'\n\n    repositories {\n        mavenCentral()\n        \n    }\n\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n    apply plugin: 'kotlin'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n        \n    }\n\n    dependencies {\n        compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    compileKotlin.destinationDir = compileJava.destinationDir\n\n    compileKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n    compileTestKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n\n    sourceSets {\n        main {\n            kotlin.srcDir 'src'\n            java.srcDir 'src'\n        }\n        test {\n            kotlin.srcDir 'test'\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n    test {\n        outputs.upToDateWhen { false }\n        afterTest { TestDescriptor test, TestResult result ->\n            if (result.resultType == TestResult.ResultType.FAILURE) {\n                def message = result.exception?.message ?: \"Wrong answer\"\n                def lines = message.readLines()\n                println \"#educational_plugin FAILED + \" + lines[0]\n                lines.subList(1, lines.size()).forEach { line ->\n                  println \"#educational_plugin\" + line\n                }\n                // we need this to separate output of different tests\n                println()\n            }\n        }\n    }\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(':util') {\n    dependencies {\n        compile group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    compile project(':util').sourceSets.main.output\n    testCompile project(':util').sourceSets.test.output\n    testImplementation (\"com.github.stefanbirkner:system-lambda:1.2.0\")\n  }\n}\n"
    }
  ],
  "version" : 11
}